Package: Prerano::Examples::Matching
  Public:
    Types:
      length => fn(any):int
      foo => fn(int):int
      mod2 => fn(int):int
    Functions:
      length:
        result: unknown $81
        blocks: 
          Block #4()
            Expr_Is:
                cond: unknown $16<input>
                type: TYPE(string)
                result: (true|false) $17
            Expr_If:
                cond: (true|false) $17
                result: unknown $23
             if->Block #6
             else->Block #7

          Block #6($20<input>)
            Expr_FuncCall:
                name: php::strlen $21
                args: [unknown $19<input>]
                result: unknown $22
            Expr_Assign:
                var: unknown $81
                expr: unknown $22
             *->Block #5

          Block #5()

          Block #7()
            Expr_Is:
                cond: unknown $16<input>
                type: TYPE(array<any>)
                result: (true|false) $24
            Expr_If:
                cond: (true|false) $24
                result: unknown $30
             if->Block #8
             else->Block #9

          Block #8($27<input>)
            Expr_FuncCall:
                name: php::count $28
                args: [unknown $26<input>]
                result: unknown $29
            Expr_Assign:
                var: unknown $81
                expr: unknown $29
             *->Block #5

          Block #9()
            Expr_Is:
                cond: unknown $16<input>
                type: TYPE(int)
                result: (true|false) $31
            Expr_If:
                cond: (true|false) $31
                result: unknown $35
             if->Block #10
             else->Block #11

          Block #10($34<input>)
            Expr_Assign:
                var: unknown $81
                expr: unknown $33<input>
             *->Block #5

          Block #11()
            Expr_Assign:
                var: unknown $81
                expr: int $37 = 0
             *->Block #5

      foo:
        result: unknown $82
        blocks: 
          Block #12()
            Expr_BinaryOp_Equals:
                left: unknown $41<input>
                right: int $42 = 0
                result: (true|false) $43
            Expr_If:
                cond: (true|false) $43
                result: unknown $46
             if->Block #14
             else->Block #15

          Block #14()
            Expr_Assign:
                var: unknown $82
                expr: int $45 = 1
             *->Block #13

          Block #13()

          Block #15()
            Expr_BinaryOp_Equals:
                left: unknown $41<input>
                right: int $47 = 1
                result: (true|false) $48
            Expr_If:
                cond: (true|false) $48
                result: unknown $51
             if->Block #16
             else->Block #17

          Block #16()
            Expr_Assign:
                var: unknown $82
                expr: int $50 = 2
             *->Block #13

          Block #17()
            Expr_Assign:
                var: unknown $82
                expr: int $53 = 3
             *->Block #13

      mod2:
        result: unknown $83
        blocks: 
          Block #19()
            Expr_FuncCall:
                name: isEven $66
                args: [unknown $65<input>]
                result: unknown $67
            Expr_If:
                cond: unknown $67
                result: unknown $70
             if->Block #21
             else->Block #22

          Block #21()
            Expr_Assign:
                var: unknown $83
                expr: int $69 = 0
             *->Block #20

          Block #20()

          Block #22($72<input>)
            Expr_BinaryOp_Equals:
                left: unknown $71<input>
                right: int $73 = 1
                result: (true|false) $74
            Expr_If:
                cond: (true|false) $74
                result: unknown $77
             if->Block #23
             else->Block #24

          Block #23()
            Expr_Assign:
                var: unknown $83
                expr: int $76 = 0
             *->Block #20

          Block #24()
            Expr_Assign:
                var: unknown $83
                expr: int $79 = 1
             *->Block #20

  Protected:
    Types:
    Functions:
  Private:
    Types:
      isEven => fn(int):(true|false)
    Functions:
      isEven:
        result: (true|false) $61
        blocks: 
          Block #18()
            Expr_BinaryOp_Mod:
                left: unknown $57<i>
                right: int $58 = 2
                result: unknown $59
            Expr_BinaryOp_Equals:
                left: unknown $59
                right: int $60 = 0
                result: (true|false) $61

