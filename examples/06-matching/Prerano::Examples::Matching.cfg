Package: Prerano::Examples::Matching
  Public:
    Types:
      length => fn(any)int
      foo => fn(int)int
      mod2 => fn(int)int
    Functions:
      length:
        result: unknown $60{from #8: int $44, from #10: int $51, from #12: unknown $55<input>, from #13: int $59 = 0}
        blocks: 
          Block #6()
            Expr_Is:
                cond: any $38<input>
                type: string
                result: (true|false) $39
            Expr_If:
                cond: (true|false) $39
                result: unknown $45
             if->Block #8
             else->Block #9

          Block #8($42<input>)
            Expr_FuncCall:
                name: php::strlen $43
                args: [unknown $41<input>]
                result: int $44
             *->Block #7

          Block #7()

          Block #9()
            Expr_Is:
                cond: any $38<input>
                type: array<any>
                result: (true|false) $46
            Expr_If:
                cond: (true|false) $46
                result: unknown $52
             if->Block #10
             else->Block #11

          Block #10($49<input>)
            Expr_FuncCall:
                name: php::count $50
                args: [unknown $48<input>]
                result: int $51
             *->Block #7

          Block #11()
            Expr_Is:
                cond: any $38<input>
                type: int
                result: (true|false) $53
            Expr_If:
                cond: (true|false) $53
                result: unknown $57
             if->Block #12
             else->Block #13

          Block #12($56<input>)
             *->Block #7

          Block #13()
             *->Block #7

      foo:
        result: unknown $76{from #16: int $67 = 1, from #18: int $72 = 2, from #19: int $75 = 3}
        blocks: 
          Block #14()
            Expr_BinaryOp_Equals:
                left: int $63<input>
                right: int $64 = 0
                result: (true|false) $65
            Expr_If:
                cond: (true|false) $65
                result: unknown $68
             if->Block #16
             else->Block #17

          Block #16()
             *->Block #15

          Block #15()

          Block #17()
            Expr_BinaryOp_Equals:
                left: int $63<input>
                right: int $69 = 1
                result: (true|false) $70
            Expr_If:
                cond: (true|false) $70
                result: unknown $73
             if->Block #18
             else->Block #19

          Block #18()
             *->Block #15

          Block #19()
             *->Block #15

      mod2:
        result: unknown $102{from #23: int $91 = 0, from #25: int $98 = 0, from #26: int $101 = 1}
        blocks: 
          Block #21()
            Expr_FuncCall:
                name: isEven $88
                args: [int $87<input>]
                result: (true|false) $89
            Expr_If:
                cond: (true|false) $89
                result: unknown $92
             if->Block #23
             else->Block #24

          Block #23()
             *->Block #22

          Block #22()

          Block #24($94<input>)
            Expr_BinaryOp_Equals:
                left: unknown $93<input>
                right: int $95 = 1
                result: (true|false) $96
            Expr_If:
                cond: (true|false) $96
                result: unknown $99
             if->Block #25
             else->Block #26

          Block #25()
             *->Block #22

          Block #26()
             *->Block #22

  Protected:
    Types:
    Functions:
  Private:
    Types:
      isEven => fn(int)(true|false)
    Functions:
      isEven:
        result: (true|false) $83
        blocks: 
          Block #20()
            Expr_BinaryOp_Mod:
                left: int $79<i>
                right: int $80 = 2
                result: unknown $81
            Expr_BinaryOp_Equals:
                left: unknown $81
                right: int $82 = 0
                result: (true|false) $83

