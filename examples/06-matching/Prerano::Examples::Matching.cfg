Package: Prerano::Examples::Matching
  Public:
    Types:
      length => fn(any)int
      foo => fn(int)int
      mod2 => fn(int)int
    Functions:
      length:
        result: unknown $52{from #8: int $36, from #10: int $43, from #12: unknown $47<input>, from #13: int $51 = 0}
        blocks: 
          Block #6()
            Expr_Is:
                cond: any $30<input>
                type: string
                result: (true|false) $31
            Expr_If:
                cond: (true|false) $31
                result: unknown $37
             if->Block #8
             else->Block #9

          Block #8($34<input>)
            Expr_FuncCall:
                name: php::strlen $35
                args: [unknown $33<input>]
                result: int $36
             *->Block #7

          Block #7()

          Block #9()
            Expr_Is:
                cond: any $30<input>
                type: array<any>
                result: (true|false) $38
            Expr_If:
                cond: (true|false) $38
                result: unknown $44
             if->Block #10
             else->Block #11

          Block #10($41<input>)
            Expr_FuncCall:
                name: php::count $42
                args: [unknown $40<input>]
                result: int $43
             *->Block #7

          Block #11()
            Expr_Is:
                cond: any $30<input>
                type: int
                result: (true|false) $45
            Expr_If:
                cond: (true|false) $45
                result: unknown $49
             if->Block #12
             else->Block #13

          Block #12($48<input>)
             *->Block #7

          Block #13()
             *->Block #7

      foo:
        result: unknown $68{from #16: int $59 = 1, from #18: int $64 = 2, from #19: int $67 = 3}
        blocks: 
          Block #14()
            Expr_BinaryOp_Equals:
                left: int $55<input>
                right: int $56 = 0
                result: (true|false) $57
            Expr_If:
                cond: (true|false) $57
                result: unknown $60
             if->Block #16
             else->Block #17

          Block #16()
             *->Block #15

          Block #15()

          Block #17()
            Expr_BinaryOp_Equals:
                left: int $55<input>
                right: int $61 = 1
                result: (true|false) $62
            Expr_If:
                cond: (true|false) $62
                result: unknown $65
             if->Block #18
             else->Block #19

          Block #18()
             *->Block #15

          Block #19()
             *->Block #15

      mod2:
        result: unknown $94{from #23: int $83 = 0, from #25: int $90 = 0, from #26: int $93 = 1}
        blocks: 
          Block #21()
            Expr_FuncCall:
                name: isEven $80
                args: [int $79<input>]
                result: (true|false) $81
            Expr_If:
                cond: (true|false) $81
                result: unknown $84
             if->Block #23
             else->Block #24

          Block #23()
             *->Block #22

          Block #22()

          Block #24($86<input>)
            Expr_BinaryOp_Equals:
                left: unknown $85<input>
                right: int $87 = 1
                result: (true|false) $88
            Expr_If:
                cond: (true|false) $88
                result: unknown $91
             if->Block #25
             else->Block #26

          Block #25()
             *->Block #22

          Block #26()
             *->Block #22

  Protected:
    Types:
    Functions:
  Private:
    Types:
      isEven => fn(int)(true|false)
    Functions:
      isEven:
        result: (true|false) $75
        blocks: 
          Block #20()
            Expr_BinaryOp_Mod:
                left: int $71<i>
                right: int $72 = 2
                result: unknown $73
            Expr_BinaryOp_Equals:
                left: unknown $73
                right: int $74 = 0
                result: (true|false) $75

